// Programmers: Kamron Gonzales, Ziv Fuchs, Hayoun Lim, Brooke Morris, Ty Hewitt
// Programmers’ IDs: 1564995, 1796140, 1533059, 1504892, 1779597

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>
#include <sstream>
#include <map>
#include <vector>
using namespace std;

#include "StaticArray.h"
#include "PriorityQueue.h"

const string DAYOFWEEK[] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
const string MONTHS[] = { "January", "February", "March", "April", "May", "June", "July", "August",
		"September", "October", "November", "December"
};

template<typename T>
void TitleCard(T);
int DaysInMonth(int, int);
int CalculateDay(int, int, int);
string MonthSelect();
string SelectDay(int, int, int);

struct task
{
	string name;
	string description;
	int importance;
	bool operator<(task operand)
	{
		if (this->importance < operand.importance) return true;
		return false;
	}
};

struct day
{
	int month;
	int date;
	

};

int main()
{
	cout << "Programmers: Kamron Gonzales, Ziv Fuchs, Hayoun Lim, Brooke Morris, Ty Hewitt\n";
	cout << "Programmers’ IDs: 1564995, 1796140, 1533059, 1504892, 1779597\n";
	cout << "File: " << __FILE__ << endl;	

	StaticArray<StaticArray<day, 31>, 12> year;
	map<int, map<int, string>> tasksReminders;
	string input = "";

	int year_number = 2021;
	int month = 1;
	int dayNum = 1;

	ifstream fin;
	fin.open("planner.txt");
	if (!fin.good())
	{
		cout << "Input file does not exist, you can interface with a blank planner.\nWhich year do you choose? ";
		cin >> input; year_number = atoi(input.c_str());
	}
	else
	{
		string line;
		string substring;
		string taskName;
		string taskDescription;
		int taskPriority;

		getline(fin, line);
		year_number = atoi(line.c_str());

		while (getline(fin, line)) {
			stringstream ss(line);
			string tStr;
			int counter = 0;
			while(getline(ss, tStr, '|')) {
				if (counter == 0) //Day and month
				{
					stringstream(tStr) >> month >> dayNum;
					tasksReminders[month][dayNum];
				}
				else 
				{ //Tasks && reminders
					stringstream sst(tStr);
					string token;
					if (!tStr.empty()) {
						while (getline(sst, token, ',')) {
							if (counter == 1) { //tasks
								//cout << "Task: " << token << endl;
								tasksReminders[month][dayNum].append(token);
							}
							else if (counter == 2) { //reminders
								//cout << "Reminder: " << token << endl;
								tasksReminders[month][dayNum].append(token);
							}
						}
					}
				}
				counter++;
			}
		}
	}

	string month_choice;
	do {
		TitleCard(year_number);
		month_choice = MonthSelect();
		int month_c = -1;
		if (toupper(month_choice[0]) != 'Q') {
			string d;
			int month = 0; stringstream(month_choice) >> month;
			do {
				TitleCard(MONTHS[month-1]+" "+to_string(DaysInMonth(month, year_number)));
				d = SelectDay(CalculateDay(month, 1, year_number), DaysInMonth(month,year_number), atoi(d.c_str()));
				/*cout << DAYOFWEEK[CalculateDay(month, 1, year_number)] << endl;
				cin >> month;*/
			} while (toupper(d[0]) != 'X');
		}
	} while (toupper(month_choice[0]) != 'Q');

	fin.close();

	cin.ignore(200, '\n');
	cout << "Press ENTER or RETURN to continue...";
	cin.get();
}

template<typename T>
void TitleCard(T output) 
{
	system("CLS");
	cout.fill('='); cout << left << setw(46) << ' ' << endl; cout.fill(' ');
	cout << setw(23) << right << output << endl;
	cout.fill('='); cout << left << setw(46) << ' ' << endl; cout.fill(' ');
}

int CalculateDay(int m, int d, int y)
{
	int century = y / 100, year = y % 100;
	int zellerMonth = (m + 10) % 12;
	int day = d + ((13 * zellerMonth - 1) / 5) + year + (year / 4) + (century / 4) - (2 * century); //Zellers rule
	if (day < 0)
	{
		day *= -1;
		day = (((day / 7) + 1) * 7) - day;
	}
	return day%7;
}

int DaysInMonth(int month_num, int year_num) 
{
	int days = ((month_num + (month_num >7)) % 2) - 
		((2 - (((year_num % 4 == 0) && (year_num % 100 != 0)) 
			|| (year_num % 400 == 0))) * (month_num == 2));
	return 30 + days;
}

string MonthSelect() 
{
	for (int i = 0; i < 12; i++) {
		(i % 3 == 0) && (i != 0) && cout << endl;
		cout << right << "[" << setw(2) << i + 1 << "]" << setw(10) << left << MONTHS[i];
	} cout << endl;
	
	string tok;
	int monthNum = 0;
	do {
		cout << "Enter Month number: ";
		getline(cin, tok);
		monthNum = atoi(tok.c_str());
	} while ((monthNum < 1 || monthNum > 12) && cout << "ERROR: Invalid month\n");
	return tok;
}

string SelectDay(int start_day, int max_days, int selected_day = 1) //Default the day to the first
{
	const int week_length = 7, max_weeks = 5;
	string day;
	for (string day : DAYOFWEEK) {
		cout << right << setw(6) << day.substr(0,3);
	}
	cout << endl;

	int curr_day = 1;
	for(int day_num = 1; day_num <= max_weeks * week_length; day_num++)
	{
		string output = " ";
		char pad_1 = ' '; char pad_2 = pad_1;
		if (curr_day <= max_days && day_num >= start_day) output = to_string(curr_day++);
		if (curr_day-1 == selected_day && output != " ") { pad_1 = '['; pad_2 = ']'; }

		cout << left << setw(3) << right << pad_1 << setw(2) << output << pad_2;
		(day_num >0 && day_num % 7 == 0) && cout << endl;
	}

	cout << "\nEnter day to search\nDay Number: ";
	getline(cin, day);
	return day;
}
