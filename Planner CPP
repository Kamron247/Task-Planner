// Programmers: Kamron Gonzales, Ziv Fuchs, Hayoun Lim, Brooke Morris, Ty Hewitt
// Programmers� IDs: 1564995, 1796140, 1533059, 1504892, 1779597

#include <iostream>
#include <string>
using namespace std;

#include "StaticArray.h"
#include "PriorityQueue.h"

string calculateDay(int month, int date);

struct task
{
	string name;
	string description;
	int importance;
	bool operator<(task operand)
	{
		if (this->importance < operand.importance) return true;
		return false;
	}
};

struct day
{
	// store date as "month/day" (November 12 = 11/12)
	int month;
	int date;
	// store priorityQueue of tasks with capacity 10
	PriorityQueue<task> tasks{ (10) }; // I believe the brackets are necessary because the declaration is ambiguous, without them it tasks could be a 
									   // function which returns a PriorityQueue of task objects.
	// store priorityQueue of reminders with capacity 3
	PriorityQueue<string> reminders{ (3) };
	// calculate day of the week and store day of the week. calculation can be done in default constructor?
	string dayOfTheWeek = calculateDay(month, date);
};

int main()
{
	cout << "Programmers: Kamron Gonzales, Ziv Fuchs, Hayoun Lim, Brooke Morris, Ty Hewitt\n";
	cout << "Programmers� IDs: 1564995, 1796140, 1533059, 1504892, 1779597\n";
	cout << "File: " << __FILE__ << endl;

	StaticArray<StaticArray<day, 31>, 12> year_2021;
	year_2021[1][1].tasks.push({ "Mow the lawn", "Mow the lawn", 10 });
	cout << year_2021[1][1].tasks.top().name;

	/*int month;
	int date;
	string buf;

	while (true)
	{
		cout << "\nEnter a month (integer 1-12): ";
		cin >> buf;
		if (buf == "Q" || buf == "q") break;
		month = atoi(buf.c_str());

		cout << "Enter a date (integer 1-31): ";
		cin >> buf;
		if (buf == "Q" || buf == "q") break;
		date = atoi(buf.c_str());

		cout << "The day of the week of the given date is: " << calculateDay(month, date);
		cout << endl;
	}*/

	cin.ignore(200, '\n');
	cout << "Press ENTER or RETURN to continue...";
	cin.get();

}

string calculateDay(int month, int date)
{
	int dayOfTheYear = 0;

	switch (month)
	{
	case 1:
		dayOfTheYear = date;
		break;
	case 2:
		dayOfTheYear = 31 + date;
		break;
	case 3:
		dayOfTheYear = 59 + date;
		break;
	case 4:
		dayOfTheYear = 90 + date;
		break;
	case 5:
		dayOfTheYear = 120 + date;
		break;
	case 6:
		dayOfTheYear = 151 + date;
		break;
	case 7:
		dayOfTheYear = 181 + date;
		break;
	case 8:
		dayOfTheYear = 212 + date;
		break;
	case 9:
		dayOfTheYear = 243 + date;
		break;
	case 10:
		dayOfTheYear = 273 + date;
		break;
	case 11:
		dayOfTheYear = 304 + date;
		break;
	case 12:
		dayOfTheYear = 334 + date;
		break;
	default:
		return "INVALID DATE";
		break;
	}

	int dayOfTheWeek = ((dayOfTheYear + 4) % 7) + 1;

	switch (dayOfTheWeek)
	{
	case 1:
		return "Sunday";
		break;
	case 2:
		return "Monday";
		break;
	case 3:
		return "Tuesday";
		break;
	case 4:
		return "Wednesday";
		break;
	case 5:
		return "Thursday";
		break;
	case 6:
		return "Friday";
		break;
	case 7:
		return "Saturday";
		break;
	default:
		return "INVALID DATE";
		break;
	}
}
